{}

const
  CHAT_GAME    = 0;
  CHAT_PUBLIC  = 1;
  CHAT_PRIVATE = 2;
  CHAT_FRIENDS = 3;
  CHAT_CLAN    = 4;
  CHAT_TRADE   = 5;
  CHAT_ASSIST  = 6;

(*
Sets Chat to desired state
Game  Public  Private  Clan  Trade  Assist
0       1       2       3     4       5
*)
function SetChat(state: string; chat: Integer): Boolean;
var
   x, y, mx, Color: Integer;
begin
  result := false;
  mx := 90 + (chat * 55);

  if (not InRange(chat, CHAT_GAME, CHAT_ASSIST)) then
  begin
    srl_Warn('SetChat', 'chat(' + IntToStr(chat) + ') does not exist.', warn_AllVersions);
    Exit;
  end;

  case Lowercase(State) of
    'on', 'all': Color := 65280;
    'off': Color := 255;
    'hide': Color := 16776960;
    'friends', 'filter': Color := 65535;
    else
      srl_Warn('SetChat', state + ' does not exist.', warn_AllVersions);
  end;

  if (not FindColor(x, y, Color, mx - 10, 486, mx + 10, 502)) then
  begin
    Mouse(mx, 496, 4, 4, mouse_right);
    Wait(RandomRange(50, 150));

    if (Lowercase(State) = 'off') then
    begin
      case chat of
        CHAT_PUBLIC, CHAT_ASSIST: Mouse(mx, 496 - 33, 8, 3, mouse_left);
        CHAT_PRIVATE..CHAT_TRADE: Mouse(mx, 496 - 20, 8, 3, mouse_left);
      end;

      Wait(RandomRange(50, 150));
      Result := FindColor(x, y, Color, mx - 10, 486, mx + 10, 502);
    end else
      Result := WaitOption(Capitalize(State), 300);
  end;
end;

(*

Sets all the chats to a particular state in one simple procedure.
Leave the parameter as '' if you wish to leave the chat as it is.

SetAlChats('all', 'Hide', '', 'Off', '', 'Friend');

*)
procedure SetAllChats(Game, Pub, Priv, Friends, Clan, Trade, Assist: string);
var
  States: TStringArray;
  II: Integer;
begin
  if (not(LoggedIn)) then Exit;
  States := [Game, Pub, Priv, Friends, Clan, Trade, Assist];
  for II := 0 to 6 do
  begin
    if (States[II] = '') then Continue;
    SetChat(States[II], II);
  end
end;

procedure ChatsOff;
var
  i: Integer;
begin
  for i := 1 to 6 do
    SetChat('off', i);
end;

procedure ChatWait;
begin
  Wait(400 + Random(500));
end;

function ClickContinueEx(Click, Wait: Boolean): Boolean;
var
  bTxt, wTxt, SearchTPA, TextTPA, Matches : TPointArray;
  Search2D : T2DPointArray;
  b : TBox;
  Height, i, x, y : Integer;
begin
  Result := false;
  FindColorsTolerance(bTxt, 8388608, MCX1, MCY1, MCX2, MCY2, 10);
  FindColorsTolerance(wTxt, 16777215, MCX1, MCY1, MCX2, MCY2, 10);

  SearchTPA := CombineTPA(bTxt, wTxt);
  if Length(SearchTPA) < 1 then
    Exit;

  Search2D := SplitTPAEx(SearchTPA, 20, 2);

  TextTPA := LoadTextTPA('here to conti', NPCChars, Height);
  for i := 0 to High(Search2D) do
  begin
    Result := FindTextTPAinTPA(Height, TextTPA, Search2D[i], Matches);
    if Result and Click then
    begin
      b := GetTPABounds(Search2D[i]);
      GetMousePos(x, y);
      if PointInBox(Point(x, y), b) then
        Mouse(x, y, 2, 1, true)
      else
        with b do
          Mouse(RandomRange(x1, x2), RandomRange(y1 + 2, y2 - 2), 2, 1, true);
      if Wait then
        ChatWait;
    end;
    if Result then
      Break;
  end;
end;

Function ClickContinue(SpaceBar, DoWait: Boolean): Boolean;
var
  TPA: TPointArray;
  i, C, T: integer;
  B: TBox;
  ATPA: T2DPointArray;
begin
  if ClickContinueEx(SpaceBar, DoWait) then
  begin
    Result := true;
    Exit;
  end;
  C := GetColorToleranceSpeed;
  SetColorToleranceSpeed(1);
  FindColorsTolerance(TPA, 11776948, MCX1, MCY1, MCX2, MCY2, 15);//color is constant atm
  SetColorToleranceSpeed(C);
  if Length(TPA) < 1 then
    Exit;
  ATPA := SplitTPA(TPA, 2);
  for i := 0 to High(ATPA) do
  begin
    B := GetTPABounds(ATPA[i]);
    if InRange(B.x2-B.x1, 58, 72) then
    if (CountColorTolerance(1203763, B.x1-5, B.y1+1, B.x2+5, B.y1+15, 37) > 50) then
    begin
      C := CountColor(0, MCX1, MCY1, MCX2, MCY2);
      if SpaceBar then
        TypeByte(VK_SPACE)
      else
        Mouse(B.x1, B.y1, (B.x2-B.x1), 8, true);
      Result := True;
      T := GetSystemTime + 10000;
      if DoWait then
        while (C = CountColor(0, MCX1, MCY1, MCX2, MCY2)) and (GetSystemTime < T) do
          Wait(50+random(50));
      Exit;
    end;
  end;
end;

function ClickToContinue: Boolean;
begin
  Result := ClickContinue(True, False);
end;

function TextCoords(textn: Integer): TPoint;
begin
  Result.X := 10;
  Result.Y := 346 + (14 * (textn - 1));
end;

function GetChatBoxText(Line, TextCol: Integer): string;
var
  P: TPoint;
  cArr: TPointArray;
  B: TBox;
begin
  Result := '';
  P := TextCoords(Line);
  if (FindColorsTolerance(cArr, TextCol, MCX1, P.y, MCX2, P.y + 13, 0)) then
  begin
    B := GetTPABounds(cArr);
    result := Trim(GetTextAtExWrap(b.x1-1,p.y,B.x2+1,p.y+13,0,5,2,TextCol,0,SmallChars));
  end;
end;

function FindChatBoxText(Text: string; Line: Integer; TextCol: Integer): Boolean;
begin
  Result := (Pos(Text, GetChatBoxText(Line, TextCol)) > 0);
end;

function IsChatBoxTextBetween(Text: string; TextCol, StartLine, EndLine: Integer): Boolean;
var
  II: Integer;
begin
  Result := True;
  for II := Max(StartLine, EndLine) downto Min(StartLine, EndLine) do
    if (FindChatBoxText(Text, II, TextCol)) then
      Exit;
  Result := False;
end;

function IsChatBoxTextAnyLine(Text: string; TextCol: Integer): Boolean;
begin
  Result := IsChatBoxTextBetween(Text, TextCol, 1, 8);
end;

function ChatBoxTextArray(TextCol: Integer): TStringArray;
var
  II: Integer;
begin
  SetLength(Result, 9);
  for II := 8 downto 1 do
    Result[II] := GetChatBoxText(II, TextCol);
end;

function GetBlackChatMessage: string;
begin
  Result := GetChatBoxText(8, clMessage);
end;

function FindBlackChatMessage(ChatMsg: string): Boolean;
begin
  Result := (Pos(ChatMsg, GetChatBoxText(8, clMessage)) > 0);
end;

function LastChatter(var name: string): Boolean;
var
  i: Integer;
begin
  Result := False;
  Name := LowerCase(GetBlackChatMessage);
  i := Pos(':', name);
  if (i <> 0) then
  begin
    Delete(Name, i, i);
    Result := True;
  end;
end;

function GetLastChatText(var chat: string): Boolean;
begin
  Chat := GetChatBoxText(8, clChat);
  Result := (Chat <> '');
end;

function InChat(Text: string): Boolean;
var
  s: string;
begin
  if (not (GetLastChatText(s))) then
    LastChatter(s);

  Result := (Pos(LowerCase(Text), Lowercase(s)) > 0);
end;

procedure FixChat;
var
  ScrollX, ScrollY: Integer;
begin
  ScrollX := 507 + Random(8);
  ScrollY := 451 + Random(8);
  if (GetColor(505, 439) = 2041131) then
  begin
    MMouse(ScrollX, ScrollY, 0, 0);
    HoldMouse(ScrollX, ScrollY, mouse_left);
    while (GetColor(505, 439) = 2041131)  do
      Wait(10 + random(15));
	  Wait(50+random(50));
    ReleaseMouse(ScrollX, ScrollY, mouse_left);
    Wait(100+random(50));
  end;
end;

procedure SaveToChatLog;
begin
  FixChat;
  OldLine := TheLine;

  if(LastChatter(TheName))then
  begin
    GetLastChatText(TheLine);
    TheLine:=' '+TheLine+' ';
    if OldLine <> TheLine then
    try  AddToSRLLog(TheName+':'+TheLine); except end;
  end else
  begin
    TheLine:=TheName;
    if OldLine <> TheLine then
    try  AddToSRLLog(TheLine);  except end;
  end;
end;

function ColorEffectAdd(Color, Effect: Boolean): string;
var
  Str : TStringArray;

begin
  Result := '';
  Str := ['flash1:', 'flash2:', 'flash3:', 'glow1:', 'glow2:', 'glow3:', 'red:',
    'green:', 'cyan:', 'purple:', 'white:', 'scroll:', 'shake:', 'slide:',
    'wave:', 'wave2:'];
  if Color then
    Result := Str[Random(11)];
  if Effect then
    Result := Result + Str[11 + Random(5)];
end;

function GetNPCChatName(): string;
begin
  result := getTextAtExWrap(152, 345, 366, 370, 0, 50, 30, 7913190, 15, NPCChars);
end;

function AreTalking(): boolean;
begin
  result := (getNPCChatName <> '');
end;

function DoConversation(resultText: string; clickResult: boolean): boolean;
var
  t: integer;
begin
  while (t < 25) do // max of 25 "click to continue's"
  begin
    if (resultText <> '') then
      if (findNPCChatText(resultText, nothing)) then
      begin
        if (clickResult) then
          clickContinue(true, true);

        result := true;
        break;
      end;

    // break if there's no more conversation
    if (not clickContinue(true, true)) then
      break;

    wait(100 + random(200));
    inc(t);
  end;
end;

function PlayerChatActive: Boolean;
begin
  Result:= not FindChatBoxText('Press Enter to Chat', 9, clBlack);
end;
