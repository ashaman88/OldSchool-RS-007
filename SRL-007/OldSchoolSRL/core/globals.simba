{}

type
  TBooleanArray = array of Boolean;

{ const SRLVersionNumber;
  Description: Repository Version Number. }
const
  SRLVersionNumber = 38;

{ var TalkAfterRandoms: Boolean;
  Description: Talk random phrases after randoms are detected/solved. }
var
  TalkAfterRandoms: Boolean;

{ var WorldSwitcherEnabled: Boolean;
  Description: Enables world switching. }

var
  WorldSwitcherEnabled: Boolean;

{ var FriendChars, LoginChars: Integer;
  Description: Fonts used internally and for use in scripts. }
{$IFDEF LoadExtraFonts}
var
  FriendChars, LoginChars: Integer;
{$ENDIF}

{ var bmpAdmin, bmpMod, Lamp, BoxMask: Integer;
  Description: Global Bitmaps. Need to be Global because of SCAR Memory leaks. }
var
  bmpAdmin, bmpMod, bmpFlag, Lamp, BookOfKnowledge, SRL_OPTIONS_BITMAP : Integer;

{ var RoadColor, WaterColor, BankColor: Integer;
  Description: Three variables you will almost always use. :) }
var
  RoadColor, WaterColor, BankColor: Integer;

{ var LampSkill: String;
  Description: Set Lamp skill. }
var
  LampSkill: string; // no longer used

var
  SRL_DisableIPLog: boolean;

{ const srl_outline_black
  Description: Black Color outline}
const
  srl_outline_black = 131072;
  srl_outline_white = clWhite;

{ const MMX1, MMY1, MMX2, MMY2;
  Description: MiniMap Edge Points. }
const
  MMX1 = 550;
  MMY1 = 8;
  MMX2 = 703;
  MMY2 = 161;

{ const MMCX, MMCY;
  Description: MiniMap Centre Point. }
const
  MMCX = 627;
  MMCY = 85;

{ const MSX1, MSY1, MSX2, MSY2;
  Description: Main Screen EdgePoints. }
const
  MSX1 = 4;
  MSY1 = 4;
  MSX2 = 515;
  MSY2 = 337;

{ const MSCX, MSCY;
  Description: Main Screen Centre Points. }
const
  MSCX = 259;
  MSCY = 170;

{ const MIX1, MIY1, MIX2, MIY2;
  Description: Inventory EdgePoints. }
const
  MIX1 = 547;
  MIY1 = 202;
  MIX2 = 737;
  MIY2 = 466;

{ const MICX, MICY;
  Description: Inventory Centre Points. }
const
  MICX = 642;
  MICY = 334;

{ const MCX1, MCY1, MCX2, MCY2;
  Description: Chat Screen EdgePoints. }
const
  MCX1 = 4;
  MCY1 = 342;
  MCX2 = 514;
  MCY2 = 475;

{ const MCCX, MCCY;
  Description: Chat Screen Centre Points. }
const
  MCCX = 250;
  MCCY = 401;

{ const MBX1, MBY1, MBX2, MBY2;
  Description: BankScreen EdgePoints (where you click the items, does not include tabs). }
const
  MBX1 = 26;
  MBY1 = 84;
  MBX2 = 480;
  MBY2 = 292;

{ const DBX1, DBY1, DBX2, DBY2;
  Description: Deposit box edgepoints (only where the item appear) }
const
  DBX1 = 91;
  DBY1 = 57;
  DBX2 = 443;
  DBY2 = 262;

{ const SRL_Procs Constants;
  Description: Constants for SRL_Procs. }
const
  srl_AntiBan          = 0;   // Your AntiBan procedure to be called during various SRL functions and procedures. (Flag, FFlag)
  srl_OnFindMod        = 1;   // After a player or Jagex mod is detected talking in the chat box.
  srl_OnFindDead       = 2;   // After the text 'Oh dear you are dead' is detected.
  srl_OnFindFight      = 3;   // After detecting a fighting random.
  srl_OnFindTrade      = 4;   // After the trade has been attempted (either success or failure).
  srl_OnNextPlayer     = 5;   // While the players are logged out and before CurrentPlayer changes.
  srl_OnSendStats      = 6;   // After SRL Script Stats are sent to the server.
  srl_OnRandomCall     = 7;   // Called in FindNormalRandoms, FindInventoryRandoms, FindNonInventoryRandoms. (NOT ONLY WHEN RANDOMS ARE DETECTED).
  srl_OnFindRandom     = 8;   // After a random event is detected. (FNR, FIR, FNIR, FT)
  srl_OnLogOut         = 9;   // Just before the player is logged out.
  srl_InNextPlayerLoop = 10;  // During the infinite loop in NextPlayer when all players are inactive.
  srl_OnCustomRC       = 11;  // When custom RC trigger has been given.
  srl_OnExitToLobby    = 12;  // On exit to lobby
  srl_OnLogIn          = 13;  // Right after player has successfully logged in.
  srl_OnRSUpdate       = 14;  // Called in LoginPlayerToLob if RuneScape updates.

{ var SRL_Procs: array [0..14] of procedure();
  Description: Varibles to store user-defined procs to be called in SRL. }
var
  SRL_Procs: array [0..14] of procedure();
  SRL_OnFindRandomCall : function(var Cont : boolean) : boolean; // no longer used

{ const GameTab Constants;
  Description: Constants representing gametab numbers. }
const
  tab_Combat = 21;
  tab_Diary = 22;
  tab_Task = 22;
  tab_Stats = 23;
  tab_Quest = 24;
  tab_Inv = 25;
  tab_Equip = 26;
  tab_Prayer = 27;
  tab_Magic = 28;
  tab_Objectives = 29;
  tab_Friends = 30;
  tab_Ignore = 30;
  tab_FriendChat = 31;
  tab_Clan = 32;
  tab_Options = 33;
  tab_Emotes = 34;
  tab_Music = 35;
  tab_Notes = 36;
  tab_LogOut = 37;

{ const Antirandoms Constants;
  Description: Constants representing randoms index. }
const
  rand_Count = 25;

  rand_Leo = 0;
  rand_Forester = 1;
  rand_Maze = 2;
  rand_PrisonPete = 3;
  rand_ScapeRune = 4;
  rand_Demon = 5;
  rand_Quiz = 6;
  rand_Mordaut = 7;
  rand_Molly = 8;
  rand_Pinball = 9;
  rand_Sandwich = 10;
  rand_BeeKeeper = 11;
  rand_Pillory = 12;
  rand_CapnArnav = 13;
  rand_Abyss = 14;
  rand_Certer = 15;
  rand_Mime = 16;
  rand_Frog = 17;

  rand_Trade = 18;
  rand_Mod = 19;
  rand_Fight = 20;
  rand_Lamp = 21;
  rand_BirdNest = 22;
  rand_Death = 23;
  rand_RewardBox = 24;

var
  tmp_RandSolved: array[0..rand_Count-1] of Integer;
  tmp_RandFailed: array[0..rand_Count-1] of integer;

{ type TAutoColorInfo;
  Description: Set of information that can be used in some functions. }
type
  TAutoColorInfo = record
    Name: string;
    Color: Integer;
    ColorArray: TIntegerArray;
    MinCount: Integer;
    MaxCount: Integer;
    MaxDist: Integer;
    MaxDistCenter: Integer;
    UpText: string;
    UpTextMulti: TStringArray;
    HueMod, SatMod: Extended;
    LumTol: Integer;
    MinR, MaxR, MinG, MaxG, MinB, MaxB: Integer;
    MinX, MaxX, MinY, MaxY, MinZ, MaxZ: Extended;
end;

{ type fnct_ActionOptions;
  Description: Action options. }
type
  fnct_ActionOptions = (ClickRight,ClickLeft,ClickMiddle,Move,Nothing);

var
{ var ACArr
  Description: Stores the information needed for the autocolour functions }
  acArr: array of TAutoColorInfo;

{ var isACLoaded
  Description: Boolean array to make sure that all TAutoColorInfos are loaded
               prior to calling. Optimizes AutoColors significantly }
  isACLoaded: array of Boolean;

{ vars For Smart}
{$IFDEF SMART}
var
  {$IFDEF SIMBAMAJOR980}
    Smart_Server: Integer;
    Smart_Members, Smart_Signed, Smart_SuperDetail: Boolean;
  {$ELSE}
    Smart_ForceNew: Boolean;
    Smart_FixSpeed: Boolean;
    SRL_SixHourFix: Boolean;
    Smart_CurrentClient: Integer;
  {$ENDIF}
{$ENDIF}

{ var WarnSensitivity: Integer
  Description: var for srl_Warn. }
var
  WarnSensitivity: Integer; //-2 will show Warnings and above, -3 notices too.

{ const srl_Warn Constants;
  Description: Constants for srl_Warn. }
const
  warn_AllVersions = 0;
  warn_Terminate = -1;
  warn_Warning = -2;
  warn_Notice = -3;
  warn_Debug = -4;

{var   SRLBitmapsLoaded : boolean;
  Description: True if SRL bmps/DTMs are loaded}
var
  SRLBitmapsLoaded : boolean;

{var   the_world : integer;
  Description: choose the world to use on oldschool RS}
var
  the_world : integer;

function SRL_HasProc(Index: Integer): Boolean;
begin
  if (Index >= Low(SRL_Procs)) and (Index <= High(SRL_Procs)) then
    Result := {$IFDEF LAPE}@{$ENDIF}SRL_Procs[Index] <> nil;
end;

procedure LoadSRLBitMaps;
begin
  bmpMod := BitmapFromString(9, 6, 'beNqbPn0RWeDBgwdAkgEMkBnTp0+HS6GR+KVwAgAGXFQr');
  bmpAdmin := BitmapFromString(9, 6, 'beNqbp/j9PwcZ6P//FiDJAAbIjGvzFOFSaCR+KZwIALniVEk=');
  bmpFlag := BitmapFromString(8, 15, 'meJxjYEAHIpr/F8yYgSkozPfE3tycGHGgIKY4RBBNHC6ILI4sAkYngOIwNhQJ8bUBBYEIyEBGQO37tm3DdCcdxIGBhlUcCBgZGAA27Tt3');
  SetTransparentColor(bmpFlag, 0);
  Lamp := DTMFromString('mggAAAHicY2NgYMhhYmDIAOIyIK4A4kIgTgPip0C5B0D8kAHCfgXEz4F46hRRIMkExn29ImB6zSoJBn4GBOBHohlxYAgAACyDDBw=');
  BookOfKnowledge := DTMFromString('78DA63CC65626078C480028A7273183480342310FF0702C64CA09AAB0C6880094C3242798CE540FE2D026ACA80FC1704D4E401F99F08A84900F2DF12509304E43FC0AF0600CF790EC3');

  SRL_OPTIONS_BITMAP := BitmapFromString(67, 19, 'meJy1VjFywzAM80M8aPT/5zymez+RXHXmMQAIUU3Ly+CQEAWQlOwxhJ3nGc/XdYHHWIadP9ZZVWWoPGCTYYUESlW0Q/Xx9f36VdFmqs5GGTM3jd9yYV/IcRxLZJ+nIRPkj9vCAxm4hvFQyZ8Jl2SahP3yrIKdy909/hdHzMOqwwgqeNimM57l7MFYRtQj2b8EmMmXlcwj9wqFkJkhZk+Cwzh5xgAfyA8ATs5azAixkJkkM2chUt1QA5yPYRWVBZlLgPOukEhVVXvcowsYk4GzSSHN0eIb1dBg5vB3N4OPbmmJQsleNzcy7f5QyLjPThyf3Fx4j4z32TaT40dakslX326hHuoGAyFxcKBx+fIZqrM5yhh5AwDG10EWodo9hIScbDkK6vL1lS1Hs8djPFIuBBWD3pVsfP9Ahg9t68PVg1kLdGq8X24dSlsad8HyCxDkGHXR0KqJ/9cgBgBVCctmAH0mfyXQM5cwf3w6x6rp7BuriIcntCCj4Q==');

  SRLBitmapsLoaded := True;
  SetBitmapName(bmpMod,'SRL - Mod bitmap');
  SetBitmapName(bmpAdmin,'SRL - Admin bitmap');
  SetBitmapName(bmpFlag, 'SRL - Flag bitmap');
  SetDTMName(Lamp,'SRL - Lamp bitmap');

  SetBitmapName(SRL_OPTIONS_BITMAP, 'SRL - Options Bitmap');
end;

procedure FreeSRLBitmaps;
begin
  if SRLBitmapsLoaded then
  begin
    FreeBitmap(bmpMod);
    FreeBitmap(bmpAdmin);
    FreeBitmap(bmpFlag);
    FreeDTM(Lamp);
    FreeDTM(BookOfKnowledge);
    FreeBitmap(SRL_OPTIONS_BITMAP);
    SRLBitmapsLoaded := False;
  end;
end;

procedure LoadSRLFonts;
begin
{$IFDEF LoadExtraFonts}
  FriendChars := LoadChars2(FontPath + 'FriendChars/');
  LoginChars := LoadChars2(FontPath +  'LoginChars/');
{$ENDIF}
end;

procedure FreeSRLFonts;
begin
{$IFDEF LoadExtraFonts}
  FreeChars2(FriendChars);
  FreeChars2(LoginChars);
{$ENDIF}
end;

procedure srl_Warn(ProcName, ErrorMessage: String; wVersion: Integer);
begin
  if (wVersion >= WarnSensitivity) then
    if (wVersion <> warn_Debug) then
      WriteLn('** Warning in ' + ProcName + ': ' + ErrorMessage + ' **')
    else
      WriteLn('Debugging ' + ProcName + ': ' + ErrorMessage);
  if wVersion = warn_Terminate then
    TerminateScript;
end;

{ MainScreen, Minimap, Inventory, Chat, Bank boxes as TBox }
var
  MSBox, MMBox, MIBox, MCBox, MBBox, MFBox: TBox;

Procedure SetupBoxes;
begin
  MSBox := IntToBox(MSX1, MSY1, MSX2, MSY2);
  MMBox := IntToBox(MMX1, MMY1, MMX2, MMY2);
  MIBox := IntToBox(MIX1, MIY1, MIX2, MIY2);
  MCBox := IntToBox(MCX1, MCY1, MCX2, MCY2);
  MBBox := IntToBox(MBX1, MBY1, MBX2, MBY2);
  MFBox := IntToBox(224, 114, 294, 150);
end;

{ const HP_BAR constants;
   Global contants storing width, height and tolerance for HP bars.
   Used in srl_InFight. }
const
  HP_BAR_TOL = 3;
  HP_BAR_WIDTH = 57;
  HP_BAR_HEIGHT = 7;
  HP_BAR_COLOR1 = 9728;//Green
  HP_BAR_COLOR2 = 132923;//Red


Function GetFightBarTPA(SearchArea: TBox): TPointArray;
var
  T: TPoint;
  H, I: integer;
  Colors: TIntegerArray;
  ATPA: T2DPointArray;
begin
  Colors := [HP_BAR_COLOR1, HP_BAR_COLOR2];
  H := High(Colors);
  SetArrayLength(ATPA, H+1);
  T := point((MFBox.x2+MFBox.x1) div 2,(MFBox.y2+MFBox.y1) div 2);
  for i := 0 to H do
    with SearchArea do
      FindColorsSpiralTolerance(T.x, T.y, ATPA[i], Colors[i], X1, Y1, X2, Y2, 2);
  Result := MergeATPA(ATPA);
end;

Function srl_InFight: Boolean;
begin
  Result := InRange(Length(GetFightBarTPA(MFBox)), 30, 240);
end;

Procedure SRL_DisableNavBar;
var
  W, H: Integer;
begin
  GetClientDimensions(W, H);
  ImageSetClientArea(SRL_NAVBAR_INGAME_X, SRL_NAVBAR_LOGIN_Y, W, H);
  MouseSetClientArea(SRL_NAVBAR_INGAME_X, SRL_NAVBAR_LOGIN_Y, W, H);
end;

Procedure SRL_EnableNavBar;
begin
  ImageResetClientArea;
  MouseResetClientArea;
end;

Procedure SRL_ResetNavBar;
begin
  SRL_EnableNavBar;
  SRL_DisableNavBar;
end;

procedure Proc_WorldSwitcherEnabled;
begin
  WorldSwitcherEnabled := WorldSwitcherEnabled;
end;
