

const
  Time_Formal = 0;
  Time_Short  = 1;
  Time_Abbrev = 2;
  Time_Bare   = 3;
  Time_FStop  = 4;

  Date_Formal = 1;
  Date_Month  = 2;
  Date_Day    = 3;

{ const srl_MaxWaitTime;
  Description: Used when ever WaitFunc is used in SRL. Increase for slow computers. }
  srl_MaxWaitTime = 400;

function InvCount: Integer; forward;
function GetCurrentTab: Integer; forward;
function TabExists(Tab: Integer): Boolean; forward;
function GameTab(Tab: Integer): Boolean; forward;

function MsToTime(MS, TheType: Integer): string;
var
  STA: array [0..4] of TVariantArray;
  Time: array [0..2] of Integer;
  i: Integer;
begin
  Result := '';
  if (not(InRange(TheType, 0, High(STA)))) then
  begin
    srl_Warn('MsToTime', 'TheType: ''' + IntToStr(TheType) + ''' is not a valid value. Using Time_Bare.', warn_AllVersions);
    TheType := Time_Bare;
  end;
  STA[Time_Formal] := [' Hours, ', ' Minutes and ', ' Seconds', False, 0];
  STA[Time_Short] := ['h ', 'm ', 's', False, 2];
  STA[Time_Abbrev] := [' hr ', ' min ', ' sec', False, 0];
  STA[Time_Bare] := [':', ':', '', True, 2];
  STA[Time_FStop] := ['.', '.', '', True, 2];
  ConvertTime(MS, Time[0], Time[1], Time[2]);
  for i := 0 to 2 do
    if (Time[i] > 0) or (STA[TheType][3]) or (i = 2) then
      Result := Result + PadZ(IntToStr(Time[i]), STA[TheType][4]) + STA[TheType][i];
end;

procedure ConvertTime64(timeMS: int64; var YEAR, MONTH, WEEK, DAY, HOUR, MINUTE, SECOND:integer);
var
  x: int64;
begin
  x := timeMS;
  YEAR   := x div (31536000000); // 1000 * 60 * 60 * 24 * 365 (1 year or 365 days)
  x      := x mod (31536000000);
  MONTH  := x div (2592000000); // 1000 * 60 * 60 * 24 * 30 (1 month or 30 days)
  x      := x mod (2592000000);
  WEEK   := x div (604800000); // 1000 * 60 * 60 * 24 * 7 (1 week or 7 days)
  x      := x mod (604800000);
  DAY    := x div (86400000); // 1000 * 60 * 60 * 24 (1 day or 24 hours)
  x      := x mod (86400000);
  HOUR   := x div (3600000); // 1000 * 60 * 60 (1 hour or 60 minutes)
  x      := x mod (3600000);
  MINUTE := x div (60000); // 1000 * 60 (1 minute or 60 seconds)
  x      := x mod (60000);
  SECOND := x div (1000); // 1000 (1 second, is in MS format now)
  x      := x mod (1000);
end;

(*******************************************************************************
** An edited version of the MsToTime include function.  This redone version of
**   the method has the following changes:
**      - single arg of an int64 type
**      - removed a boolean element in the STA : TVariantArray;
**      - removed the multiple output formats (array of STA, to simly one STA
*******************************************************************************)
function MsToTime64(MS: int64): string;
var
  STA: TVariantArray;
  Time: array [0..6] of Integer;
  i: Integer;
begin
  Result := '';
  STA := [' Years, ', ' Months, ', ' Weeks, ', ' Days, ', ' Hours, ',
          ' Minutes and ', ' Seconds', 0];
  ConvertTime64(MS, Time[0], Time[1], Time[2], Time[3], Time[4], Time[5], Time[6]);
  for i := 0 to 6 do
    if (Time[i] > 0) or (STA[7]) or (i = 6) then
      Result := Result + PadZ(IntToStr(Time[i]), STA[7]) + STA[i];
end;

function TimeRunning: string;
begin
  Result := MsToTime(GetTimeRunning, Time_Formal);
end;

procedure MarkTime(var TimeMarker: Integer);
begin
  TimeMarker := GetSystemTime;
end;

function TimeFromMark(TimeMarker: Integer): Integer;
begin
  Result := GetSystemTime - TimeMarker;
end;

function TheTime: string;
var
  Hour, Mins, Sec, MSec: Word;
  PAM: string;
begin
  DecodeTime(Now, Hour, Mins, Sec, MSec);
  PAM := 'AM';
  if (Hour > 12) then
  begin
    Hour := Hour - 12;
    PAM := 'PM';
  end else if (Hour = 12) then
    PAM := 'PM'
  else if (Hour = 0) then
    Hour := 12;
  Result := (Padz(IntToStr(Hour), 2) + ':' + Padz(IntToStr(Mins), 2) + ':' + Padz(IntToStr(Sec), 2) + ' ' + PAM);
end;

function TheDate(DateFormat: Integer): string;
var
  Year, Month, Day: Word;
  D: string;
  Mnths, sfx: TStringArray;
begin
  DecodeDate(Date, Year, Month, Day);
  Mnths := ['January', 'February', 'March', 'April', 'May', 'June', 'July',
            'August', 'September', 'October', 'November', 'December'];
  sfx := ['st', 'nd', 'rd'];
  case DateFormat of
    1:
      begin
        if InRange(Day mod 10, 1, 3) and not InRange(Day, 11, 13) then
          D := sfx[(Day mod 10)-1]
        else
          D := 'th';
        Result := Mnths[Month - 1] + ' ' + IntToStr(Day) + D +', ' + IntToStr(Year);
      end;
    2: Result := Padz(IntToStr(Month), 2) + '/' + Padz(IntToStr(Day), 2) + '/' + Copy(IntToStr(Year), 3, 4);
    3: Result := Padz(IntToStr(Day), 2) + '-' + Padz(IntToStr(Month), 2) + '-' + Copy(IntToStr(Year), 3, 4);
  else
    srl_Warn('TheDate', 'DateFormat can only be 1, 2, or 3!', warn_AllVersions);
  end;
end;

function WaitFuncEx(Func: string; var Args: TVariantArray; WaitPerLoop, MaxWait: integer): boolean;
var
  T: integer;
  Temp: variant;
begin
  T := GetSystemTime + MaxWait;
  while (GetSystemTime < T) do
  begin
    Temp := CallProc(Func, Args);
    if (not VariantIsString(Temp)) then
      Temp := ToStr(Temp);
    Result := StrToBoolDef(Temp, False);
    if (Result) then
      Exit;
    Wait(WaitPerLoop);
  end;
end;

function WaitFunc(Func: function: Boolean; WaitPerLoop, MaxTime: Integer): Boolean;
var
  T: Integer;
begin
  T := GetSystemTime + MaxTime;
  while (GetSystemTime < T) do
  begin
    if (Func()) then
    begin
      Result := True;
      Exit;
    end;
    Wait(WaitPerLoop);
  end;
end;

function WaitOptionMultiEx(S: TStringArray; TextType: string; Action: fnct_ActionOptions; Time: Integer): Boolean;
var
  T: Integer;
begin
  Result := False;
  T := GetSystemTime + Time;
  while (GetSystemTime < T) do
  begin
    if (ChooseOptionMultiEx(S, TextType, Action)) then
    begin
      Result := True;
      Exit;
    end;
    Wait(20 + Random(10));
  end;
end;

function WaitOptionMulti(S: TStringArray; Time: Integer): Boolean;
begin
  Result := WaitOptionMultiEx(S, 'all', ClickLeft, Time);
end;

function WaitOptionEx(S, TextType: string; Action: fnct_ActionOptions; Time: Integer): Boolean;
begin
  Result := WaitOptionMultiEx([S], TextType, Action, Time);
end;

function WaitOption(S: string; Time: Integer): Boolean;
begin
  Result := WaitOptionMultiEx([S], 'all', ClickLeft, Time);
end;

function WaitUpTextMulti(S: TStringArray; Time: Integer): Boolean;
var
  T: Integer;
begin
  Result := false;
  T := GetSystemTime + Time;
  while (GetSystemTime < T) do
  begin
    if (IsUpTextMultiCustom(S)) then
    begin
      Result := True;
      Exit;
    end;
    Wait(20 + Random(20));
  end;
end;

function WaitUptext(S: string; Time: Integer): Boolean;
begin
  Result := WaitUptextMulti([S], Time);
end;

function BankScreen: Boolean; forward;

function WaitInvCount(Count, MaxTime: Integer; CountType: (MaxCT, MinCT, ExactCT)): boolean;
var
  T: integer;
begin
  if not(BankScreen) then
    if not GameTab(tab_Inv) then exit;

  Result := false;
  T := GetSystemTime + MaxTime;

  while GetSystemTime < T do
  begin
    wait(10);
    case CountType of
      MaxCT   : if InvCount <= Count then  Result := true;
      MinCT   : if InvCount >=  Count then  Result := true;
      ExactCT : if InvCount =  Count then  Result := true;
    end;

    if Result then break;
  end;
end;

function WaitInvMaxCount(Count, MaxTime: integer): boolean;
begin
  Result := WaitInvCount(Count, MaxTime, MaxCT);
end;

function WaitInvMinCount(Count, MaxTime: integer): boolean;
begin
  Result := WaitInvCount(Count, MaxTime, MinCT);
end;

function WaitColor(X, Y, Color, Tol, MaxTime: Integer): Boolean;
var
  Time: Integer;
begin
  Result := False;
  if tol = 0 then tol := 1; //due to scar bug
  Time := GetSystemTime + MaxTime;
  while (Time > GetSystemTime) do
  begin
    if SimilarColors(GetColor(X, Y), Color, Tol) then
    begin
      Result := True;
      Exit;
    end;
    Wait(5 + Random(6));
  end;
end;

function WaitFindColor(var X, Y: Integer; Color, x1, y1, x2, y2, Tol, MaxTime: Integer): Boolean;
var
  Time: Integer;
begin
  Result := False;
  Time := GetSystemTime + MaxTime;
  while (GetSystemTime < Time) do
  begin
    if FindColorTolerance(X, Y, Color, x1, y1, x2, y2, Tol) then
    begin
      Result := True;
      Exit;
    end;
    Wait(10 + Random(6));
  end;
end;

function WaitFindColors(var TPA: TPointArray; Color, x1, y1, x2, y2, Tol, MaxTime: Integer): Boolean;
var
  Time: Integer;
begin
  Result := False;
  Time := GetSystemTime + MaxTime;
  while (GetSystemTime < Time) do
  begin
    FindColorsTolerance(TPA, Color, x1, y1, x2, y2, Tol);
    if (Length(TPA) > 0) then
    begin
      Result := True;
      Exit;
    end;
    Wait(10 + Random(6));
  end;
end;

function WaitColorCount(Color, x1, y1, x2, y2, Tol, MinCount, MaxCount, MaxTime: integer):boolean;
var
  Time: integer;
  TPA: TPointArray;
begin
  Result := False;
  Time := GetSystemTime + MaxTime;
  while (GetSystemTime < Time) do
  begin
    if FindColorsTolerance(TPA, Color, x1, y1, x2, y2, Tol) then
      if InRange(Length(TPA), MinCount, MaxCount) then
      begin
        Result := True;
        Exit;
      end;
    Wait(15 + Random(10));
  end;
end;

function WaitColorGone(Color, x, y, Tol, MaxTime: integer): Boolean;
var
  Time: Integer;
begin
  Result := False;
  if Tol = 0 then Tol := 1;
  Time := GetSystemTime + MaxTime;
  while (Time > GetSystemTime) do
  begin
    if (not SimilarColors(GetColor(X, Y), Color, Tol)) then
    begin
      Result := True;
      Exit;
    end;
    Wait(10);
  end;
end;

function WaitColorGoneIn(Colour, x1, y1, x2, y2, Tol, MaxTime: integer): Boolean;
var
  Time, CX, CY: Integer;
begin
  Result := False;
  if Tol = 0 then Tol := 1;
  Time := GetSystemTime + MaxTime;
  while (Time > GetSystemTime) do
  begin
    if (not FindColorTolerance(cx, cy, Colour, x1, y1, x2, y2, Tol)) then
    begin
      Result := True;
      Exit;
    end;
    Wait(10);
  end;
end;

function WaitFindDTMEx(DTM: integer; var x, y: integer; xs, ys, xe, ye, WaitPerLoop, MaxTime: integer): boolean;
var
  t: integer;
begin
  t := (getSystemTime + MaxTime);

  while (getSystemTime < t) do
  begin
    if (findDTM(DTM, x, y, xs, ys, xe, ye)) then
    begin
      result := true;
      break;
    end;

    wait(WaitPerLoop);
  end;
end;

function WaitFindDTM(var x, y: integer; DTM, waitTime: integer): boolean;
begin
  result := waitFindDTMEx(DTM, x, y, MIX1, MIY1, MIX2, MIY2, 50, waitTime);
end;

function WaitTabExists(tab, waitTime: integer): boolean;
var
  t: Integer;
begin
  t := GetTickCount() + waitTime;
  repeat
    Result := TabExists(tab);
  until Result or (GetTickCount() >= t);
end;

function getNPCChatName(): string; forward;

function WaitNPCTalking(NPC: string; waitTime: integer): boolean;
var
  t: integer;
begin
  t := (getSystemTime + waitTime);

  while (getSystemTime < t) do
  begin
    if (getNPCChatName() = NPC) then
    begin
      result := true;
      break;
    end;

    wait(50 + random(25));
  end;
end;
