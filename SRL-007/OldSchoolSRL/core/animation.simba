{}
function PixelShiftMulti(B: TBoxArray; T: Integer): TIntegerArray;
Var
  L, I: Integer;
  BMP, BMP2: TIntegerArray;
begin
  L := Length(B);
  SetLength(BMP, L);
  SetLength(BMP2, L);
  SetLength(Result, L);

  for I := 0 to (L - 1) do
    BMP[I] := BitmapFromClient(B[i].x1,B[i].y1,B[i].x2,B[i].y2);
  Wait(T);
  for I := 0 to (L - 1) do
    BMP2[I] := BitmapFromClient(B[i].x1,B[i].y1,B[i].x2,B[i].y2);
  for i := 0 to (L - 1) do
    result[i] := CalculatePixelShift(BMP[i],BMP2[i],IntToBox(0,0,(b[i].x2 - b[i].x1),(b[i].y2-b[i].y1)));
  for I := 0 to (L - 1) do
  begin
    FreeBitmap(BMP[I]);
    FreeBitmap(BMP2[I]);
  end;
end;

function PixelShift(B: TBox; Time: Integer): Integer;
var
  TIA: TIntegerArray;
begin
  TIA := PixelShiftMulti([B], Time);
  Result := TIA[0];
end;

function AveragePixelShift(b: TBox; waitPerLoop, maxTime: integer): integer;
var
  t: integer;
  shifts: TIntegerArray;
begin
  t := (getSystemTime + maxTime);

  while (getSystemTime < t) do
  begin
    setLength(shifts, length(shifts)+1);
    shifts[high(shifts)] := pixelShift(b, waitPerLoop);
  end;

  result := averageTIA(shifts);
end;

function ReturnGridColorsInBox (Box : TBox) : T2DIntegerArray;
var
  x,y : Integer;
begin
  SetArrayLength(Result,box.X2-box.X1);
  for x := 0 to box.X2-box.X1-1 do
  begin
    SetArrayLength(Result[x],box.Y2-box.Y1);
    for y := 0 to box.Y2-box.Y1-1 do
    begin
      Result[x][y] := GetColor(x+box.X1,y+box.Y1);
    end;
  end;
end;

procedure ValidatePixels(Box : TBox; OrigCols : T2DIntegerArray; BoolArr : array of TBoolArray; Tolerance : Integer);
var
  X,Y : Integer;
  NewCols : T2DIntegerArray;
begin
  NewCols := ReturnGridColorsInBox(Box);
  for X := 0 to Box.X2 - Box.X1-1 do
   for Y := 0 to Box.Y2 - Box.Y1-1 do
   begin
     if not BoolArr[x][y] then
       continue;
     boolArr[x][y] := SimilarColors(origCols[x][y],NewCols[x][y],Tolerance);
   end;
end;

function InitBoolArr(Width,Height : Integer) : array of TBoolArray;
var x,y : Integer;
begin
  SetArrayLength(Result,Width);
  for x := 0 to Width-1 do
  begin
    SetArrayLength(Result[x],Height);
    for Y := 0 to Height-1 do
    begin
      Result[x][y] := True;
    end;
  end;
end;

function CountBools(BoolArr : Array of TBoolArray; CountTrues : Boolean) : Integer;
var
  X,Y,W,H,C : Integer;
begin
  W := GetArrayLength(BoolArr);
  H := GetArrayLength(BoolArr[0]);
  For X := 0 to W-1 do
    for Y := 0 to H-2 do
      if BoolArr[X][Y] = CountTrues then
        Inc(C);
  Result := C;
end;

function PixelShiftOT(Box : TBox; ShiftInterval, Repetitions, Tolerance : Integer) : Integer;
var
  I : Integer;
  T,TT : LongInt;
  OrigColArr : T2DIntegerArray;
  BoolArr : array of TBoolArray;
begin
  OrigColArr := ReturnGridColorsInBox(Box);
  BoolArr := initBoolArr(Box.X2-Box.X1,Box.Y2-Box.Y1);
  MarkTime(T);
  MarkTime(TT);
  for I := 0 to Repetitions-1 do
  begin
    if (TimeFromMark(T) > (Repetitions*ShiftInterval)) then
    begin
      srl_Warn('CalcNonStaticPixelCount','Completed only ' + IntToStr(I) + ' of '
        + IntToStr(Repetitions) + '. Try increasing the interval',1);
      break;
    end;
    MarkTime(TT);
    wait(Max(0,ShiftInterval-TimeFromMark(TT)));
    ValidatePixels(Box,OrigColArr,BoolArr,Tolerance);
  end;
  Result := CountBools(BoolArr,False);
end;

function AnimatingMulti(B: TBoxArray; Time, MinCount: Integer): TBooleanArray;
var
  Shifts: TIntegerArray;
  TT, I, H: Integer;
begin
  TT := GetSystemTime + Time;
  H := High(B);
  SetLength(Result, H + 1);
  for I := 0 to H do
    Result[I] := True;
  while (GetSystemTime < TT) do
  begin
   Shifts := PixelShiftMulti(B, 50);
   for I := 0 to H do
     if (Shifts[I] <= MinCount) then
       Result[I] := False;
  end;
end;

function Animating(B: TBox; Time, MinCount: Integer): Boolean;
var
  TBA: TBooleanArray;
begin
  TBA := AnimatingMulti([B], Time, MinCount);
  Result := TBA[0];
end;

function IsMoving: Boolean;
begin
  Result := PixelShift(IntToBox(MMCX-30, MMCY-30, MMCX+30, MMCY+30), 500) > 200;
end;

function Flag: Boolean; forward;

function WaitNotMoving(WaitFlag: Boolean): Boolean;
var
  T: Integer;
begin
  Result := False;
  if not (LoggedIn) then
    Exit;

  MarkTime(T);
  if (WaitFlag) then
    Flag;

  repeat
    Wait(RandomRange(50, 100));
    if not (IsMoving) then
    begin
      Result := True;
      Exit;
    end;
  until (TimeFromMark(T) > 20000);
end;                         
