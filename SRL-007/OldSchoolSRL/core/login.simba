{}

const
  SM_Color = 8115338;

{ var SRL_Logs: Integer;
  var RandomPlayer, GraphicsSet: Boolean;
  Description: Variables needed for some login functions. }
var
  PlayerCurTime, SRL_Logs : integer;
  RandomPlayer : Boolean;

procedure NextPlayer(Active: Boolean); forward;
procedure RandomNextPlayer(Active: Boolean); forward;

const
  // Existing User - box
  EUX1 = 389;
  EUY1 = 271;
  EUX2 = 535;
  EUY2 = 311;

  // Current World / click to switch - box
  CWX1 = 5;
  CWY1 = 463;
  CWX2 = 104;
  CWY2 = 497;

const
  UBx1 = 313; // Username tBox - in use now
  UBy1 = 254;
  UBx2 = 435;
  UBy2 = 266;

  PBx1 = 346; // Password tBox - in use now
  PBy1 = 271;
  PBx2 = 435;
  PBy2 = 281;

  GBx1 = 229; // Login Box, after entering username / password
  GBy1 = 301;
  GBx2 = 375;
  GBy2 = 341;

  WDx1 = 276; // window box (to enter game) "click here to play"
  WDy1 = 298;
  WDx2 = 499;
  WDy2 = 381;

  WHITE_TEXT    = 16777215; // white text color
  MESSAGE_BOX   = 11452366; // The "helpful message" box color
  INFO_BOX      = 7428416; // Blue information box color
  LOGIN_COLOR   = 6865381; // Login button color
  ERROR_BOX     = 2044518; // Error box (comes up on incorrect pw/un or banned acc

const                       //GetScreen
  LOGIN_TA_X1 = 210;        //Text check area
  LOGIN_TA_Y1 = 54;
  LOGIN_TA_X2 = 556;
  LOGIN_TA_Y2 = 228;

  LOGIN_TEXTCOLOUR = 16777215; //Colour of text

function LobbyScreen: Boolean;
begin
  Result := (GetColor(400, 335) = 16777215); // 'H' click Here to Play
end;

// Turns offs the music on the login screen.
//  Should default turn off, upon loading old school RS.
function SetAudioOff(): boolean;
var
  c : integer;
begin
  c := CountColor(65536, 725, 463, 760, 498);
  // 346 = Turned Off Already
  // 284 = Turned On...

  result := inrange(c, 340, 350);
  if result then
    exit
  else
    Mouse(742, 481, 10, 10, mouse_left);
end;

procedure TakeIPScreen();
var
  tmpPath: string;
begin
  if ((not lobbyScreen()) or (SRL_DisableIPLog)) then
    exit;

  tmpPath := SRL_SavePath;
  SRL_SavePath := tmpPath + 'IPLogs/'; // so TakeScreen saves to the right directory

  takeScreen('IP Log');

  SRL_SavePath := tmpPath; // reset
end;

function RSReady: boolean;
var
  t : integer;
begin
  Result := (LoggedIn);
  if result then
    exit;

  if not Result then
  begin
    t := GetSystemTime() + 120000;
    while GetSystemTime < t do
    begin
      ImageResetClientArea;
      // RSReady scren, bottom left corner, white text, Click here to switch
      //   the 'l' in click.
      Result := (GetColor(31, 488) = 16777215);
      if result then
      begin
        SetAudioOff();
        exit;
      end;
      wait(20+random(10));
    end;
  end;

  Writeln('Could not start up Old School RS. Aborting/Ciao');
  TerminateScript;
  // no resizeable client to account for here.
end;

function Logout: Boolean;
begin
  result := false;
end;

function LoginPlayerToLob: Boolean;
var
  c, t, w, typtmp : integer;
  foundLogin : boolean;
  p : TPoint;
  TPA: TPointArray;
  Boxes : TIntegerArray;
begin
  ActivateClient;
  Result := ((LobbyScreen) or (LoggedIn));
  if (Result) then
    Exit;

  if (not (Players[CurrentPlayer].Active)) then
  begin
    WriteLn('Player is not Active...');
    if (AllPlayersInActive) then
    begin
      WriteLn('All players not active!');
      Exit;
    end;
    NextPlayer(False);
    Exit;
  end;

  T := GetSystemTime;
  repeat
    if (RSReady) then
      Break;
    if ((GetSystemTime - T) > 180000) then
    begin
      WriteLn('It has been 3 minutes and Runescape is not yet ready... Terminating.');
      TerminateScript;
    end;
    Wait(RandomRange(1000, 2000));
  until (False);
  WriteLn('Welcome to Runescape.');

  if (loggedIn) then
    exit;

  // click 'Existing User'
  MouseBox(EUX1, EUY1, EUX2, EUY2, mouse_left);
  t := GetSystemTime() + 60000;
  while GetSystemTime < t do
  begin
    c := CountColor(65535, 238, 215, 526, 230);
    if c > 1 then
    begin
      foundLogin := true;
      break;
    end;
    wait(500 + random(500));
  end;
  if not FoundLogin then
  begin
    writeln('could not reach the login interface.');
    exit;
  end;

  for W := 0 to 1 do
  begin
    if W = 0 then
      Boxes := [UBX1, UBY1, UBX2, UBY2]
    else
      Boxes := [PBX1, PBY1, PBX2, PBY2];

    t := (getSystemTime + (60000 * 2));

    FindColors(TPA, LOGIN_TEXTCOLOUR, Boxes[0], Boxes[1], Boxes[2], Boxes[3]);

    repeat
      if (Length(TPA) > 0) then
      begin
        SortTPAFrom(TPA, Point(Boxes[2], Boxes[1] + (Boxes[3] - Boxes[2]) div 2));
        p := point(TPA[0].X + 20, TPA[0].Y);
        if (not pointInBox(p, intToBox(Boxes[0], Boxes[1], Boxes[2], Boxes[3]))) then
          p := point(UBX2 - (10 + random(10)), p.y);
        Mouse(p.x, p.y, 5, 5, mouse_left);
      end else
        MouseBox(Boxes[0], Boxes[1], Boxes[2], Boxes[3], mouse_left);

      typtmp := 0;
      while (CountColor(LOGIN_TEXTCOLOUR, Boxes[0], Boxes[1], Boxes[2], Boxes[3]) > 0) do
      begin
        Inc(typtmp);
        TypeByte(VK_BACK);
        Wait(50+Random(50));
        if (typtmp >= RandomRange(20, 24)) then
          Break;
      end;
    until(not FindColors(TPA, LOGIN_TEXTCOLOUR, Boxes[0], Boxes[1], Boxes[2], Boxes[3]) or (getSystemTime > t));

    Wait(100 + Random(200));

    if W = 0 then
    begin
      WriteLn(Capitalize(Players[CurrentPlayer].Name));
      TypeSend(Players[CurrentPlayer].Name);
    end else
      TypeSend(Players[CurrentPlayer].Pass);

    Wait(800 + Random(50));	//Should fix the Login -> Spam Recoveries bug
  end;

  MouseBox(GBx1, GBy1, GBx2, GBy2, mouse_left);

                        {Check responses}

  T := GetSystemTime;
  repeat
    result := lobbyScreen or loggedin;
    if result then
      break;

    if (GetSystemTime - t > 60000) then
    begin
      result := false;
      writeln('failed logging into lobby');
      exit;
    end;

    // so the lobby appears (gets rid of black screen)
    if not lobbyScreen then
    begin
      wait(1000+random(1000));
      continue;
    end;
  until (Result);

  TakeIPScreen();
end;

function LoginPlayer : boolean;
var
  t : integer;
begin
  result := LoggedIn;

  if result then
  begin
    AddToSRLLog('Current player: ' + Capitalize(Players[CurrentPlayer].Name));
    PlayerStartTime := GetSystemTime; // PlayerStartTime
    if SRL_HasProc(srl_OnLogIn) then
      SRL_Procs[srl_OnLogIn]();

    Exit;
  end;
  Wait(500 + Random(500));

  LoginPlayerToLob;

                          {Click Here to Play}
  if (LobbyScreen) then
    MouseBox(WDx1, WDy1, WDx2, WDy2, mouse_left);

  T := GetSystemTime + 60000;
  while GetSystemTime < t do
  begin
    result := loggedin;
    if result then
      break;
    wait(100+random(5000));
  end;
end;

function NextPlayerIndex: Integer;
begin
  if (AllPlayersInactive) then
  begin
    Result := -1;
    Exit;
  end;
  Result := (CurrentPlayer + 1) mod Length(Players);
  while (Players[Result].Active = False) do
    Result := (Result + 1) mod Length(Players);
end;

function RandomPlayerIndex: Integer;
var
  N: Integer;
begin
  if (AllPlayersInactive) then
  begin
    Result := -1;
    Exit;
  end;
  N := Random(Length(Players));
  while (Players[N].Active = False) or (N = CurrentPlayer) do
  begin
    if (PlayersActive = 1) and (N = CurrentPlayer) then Break;
    N := Random(Length(Players));
  end;
  Result := N;
end;

function SwitchToPlayer(PlayerNo: Integer; Active: Boolean): Boolean;
begin
  WriteLn('SwitchToPlayer(PlayerNo: ' + IntToStr(PlayerNo) + ', Active: ' + BoolToStr(Active)+ ');');
  Players[CurrentPlayer].Active := Active;
  Logout;
  if SRL_HasProc(srl_OnNextPlayer) then
    SRL_Procs[srl_OnNextPlayer]();
  PlayerCurTime := GetSystemTime;
  Players[CurrentPlayer].Worked := Players[CurrentPlayer].Worked + (PlayerCurTime - PlayerStartTime);
  CurrentPlayer := PlayerNo;
  SRL_Logs := SRL_Logs + 1;
  LoginPlayer;
  Result := LoggedIn;
end;

procedure NextPlayer(Active: Boolean);
var
  srl_PlayerIndexFunc: function: Integer;
  cP: Integer;
begin
  if (RandomPlayer) then
    srl_PlayerIndexFunc := @RandomPlayerIndex
  else
    srl_PlayerIndexFunc := @NextPlayerIndex;

  WriteLn('NextPlayer(' + BoolToStr(Active) + ')');
  LogOut;
  cP := srl_PlayerIndexFunc();
  while (cP = -1) do
  begin
    cP := srl_PlayerIndexFunc();
    if SRL_HasProc(srl_InNextPlayerLoop) then
      SRL_Procs[srl_InNextPlayerLoop]();
    Wait(5000); //Endless loop
  end;

  SwitchToPlayer(cP, Active);
end;

procedure RandomNextPlayer(Active: Boolean);
var
  tmpBool: Boolean;
begin
  tmpBool := RandomPlayer;
  RandomPlayer := True;
  NextPlayer(Active);
  RandomPlayer := tmpBool;
end;

procedure CheckUserNicks;
var
  I, II: Integer;
  Wrong, FWrong: Boolean;
  WarnStrings: TStringArray;
begin
  WarnStrings := ['Please fill in your nickname.',
                  'Your nickname isn'' found in the players name'];

  for i := 0 to HowManyPlayers - 1 do
    for II := 0 to 1 do
    begin
      case II of
        0: Wrong := (Players[i].Nick = '');
		    1: Wrong := (Pos(Players[i].nick, Capitalize(Players[i].name))<1);
      end;

      if Wrong then
      begin;
        Writeln('--');
        Writeln('WARNING: ' + WarnStrings[II] + ' with player: ' + Players[i].Name);
        FWrong := True;
      end;
    end;

  if FWrong then
  begin
    Writeln('');
    Writeln('For more information, visit http://www.villavu.com/forum/showthread.php?t=5410');
  end;
end;
