{}

function DepositScreen: Boolean; forward;

function TradeScreen: Integer;
begin
  for Result := 2 downto 1 do
    case Result of
      2: if (CountColor(16776960, 127, 32, 373, 51) > 20) then Break;
      1: if (CountColor(2070783, 150, 12, 350, 28) > 20) then Break;
    end;
end;

Function ShopScreen : Boolean;
Begin
  Result := FindTextTPA(2070783, 10, 58, 303, 85, 317, 'Right', StatChars, Nothing);
End;

function FindItemEx(var x, y: Integer; IdentType: string; Ident: Integer; Area: TBox; Tol: TIntegerArray): Boolean;
var
  Pts: TPointArray;
begin
  Result := False;
  SetLength(Tol, 2);
  case Lowercase(IdentType) of
    'bitmap mask', 'bmpmask', 'bmp mask', 'mask': Result := FindBitmapMaskTolerance(Ident, x, y, Area.x1, Area.y1, Area.x2, Area.y2, Tol[0], Tol[1]);
    'bitmap', 'bmp': Result := FindBitmapToleranceIn(Ident, x, y, Area.x1, Area.y1, Area.x2, Area.y2, Tol[0]);
    'dtm': Result := FindDTM(Ident, x, y, Area.x1, Area.y1, Area.x2, Area.y2);
    'colour', 'color':
      begin
        FindColorsTolerance(Pts, Ident, Area.x1, Area.y1, Area.x2, Area.y2, Tol[0]);
        if Tol[1] < 1 then Tol[1] := 1;
        Result := Length(Pts) >= Tol[1];
        if Result then
          MiddleTPAEx(Pts, x, y);
      end;
    else
      SRL_Warn('FindItem', 'Invalid identifier input as IdentType.', -1);
  end;
end;

function FindItem(var x, y: Integer; IdentType: string; Ident: Integer; x1, y1, x2, y2: Integer; Tol: TIntegerArray): Boolean;
begin
  Result := FindItemEx(x, y, IdentType, Ident, IntToBox(x1, y1, x2, y2), Tol);
end;

function GetAmountBox(box: TBox): integer;
var
  Col: TIntegerArray;
  X, Y, I: Integer;
  B: TBox;
  TPA: TPointArray;
  S: String;
begin
  Result := 0;

  If Not FindColor(X, Y, srl_outline_black, box.x1, box.y1, box.x2, box.y2) then
    Exit;
  Inc(Result);
  Col := [65535, 65278, 16777215, 8453888];

  For I := 0 to High(Col) do
   If FindColor(X, Y, Col[I], box.x1, box.y1, box.x2, box.y2)then
   begin
     FindColors(TPA, Col[i], box.x1, box.y1, box.x2, box.y2);
     B := GetTPABounds(TPA);
     //SMART_DrawBoxEx(False, b, clYellow);
     B := IntToBox(b.x1-2, b.y1-2, b.x2+2, b.y2+2);
     S := GetTextAtExWrap(b.x1, b.y1, b.x2, b.y2, 0, 1, 1, Col[i], 0, StatChars);
     Result := StrToIntDef(GetNumbers(S), 1);
     Case I of
       2: Result := Result * 1000;
       3: Result := Result * 1000000;
     end;
     Exit;
   end;
end;

function InvBox(i: integer): TBox; forward;

function CoordsToItem(x, y: integer): integer; forward;

function GetAmount(x, y: integer): integer;
begin
  result := getAmountBox(invBox(coordsToItem(x, y)));
end;

procedure AreaInfo(area: string; var startx, starty, rowsize, colsize, colnumber, rownumber: Integer);
begin
  case LowerCase(area) of
    'inv', 'inventory': begin
                          startx := 560;
                          starty := 212;

                          rowsize := 36;
                          colsize := 42;

                          colnumber := 4;
                          rownumber := 7;
                        end;
    'shop':             begin
                          startx := 63;
                          starty := 97;

                          rowsize := 55;
                          colsize := 39;

                          colnumber := 10;
                          rownumber := 4; //?
                        end;
    'bank':             begin
                          startx := 35;
                          starty := 91;

                          rowsize := 44;
                          colsize := 44;

                          colnumber := 10;
                          rownumber := 5;
                        end;
    'deposit box':      begin
                          startx := 97;
                          starty := 60;

                          rowsize := 48;
                          colsize := 50;

                          colnumber := 7;
                          rownumber := 4;
                        end;
    'trade':            begin
                          startx := 310;
                          starty := 75;

                          rowsize := 32;
                          colsize := 49;

                          colnumber := 4;
                          rownumber := 7;
                        end;
    'your trade':       begin
                          startx := 24;
                          starty := 75;

                          rowsize := 32;
                          colsize := 49;

                          colnumber := 4;
                          rownumber := 7;
                        end;
  else srl_Warn('AreaInfo', Area + ' is an invalid option', warn_AllVersions);
  end;
end;

function CheckArea(area: string): Boolean;
begin
  Result := false;
  case LowerCase(area) of
    'inv', 'inventory': begin
                          Result := (BankScreen) or (ShopScreen) or (TradeScreen > 0);
                          if (not(Result)) then Result := GameTab(tab_Inv);
                        end;
    'shop': Result := ShopScreen;
    'bank': Result := BankScreen;
    'deposit box': Result := DepositScreen;
    'trade', 'your trade': Result := (TradeScreen > 0);
  else
    srl_Warn('CheckArea', Area + ' is an invalid option.', warn_AllVersions);
  end;
  if (Result = False) then
    WriteLn('PROBLEM: ' + area + ' interface not open');
end;

function ItemCoordinates(Area, ItemType: string; Item: Integer; Tol: TIntegerArray): TPointArray;
var
  startx, starty, rowsize, colsize, colnumber, rownumber, col, row: Integer;
  x1, y1, x2, y2: Integer;
  itemx, itemy, L: Integer;
begin
  if (CheckArea(area)) then
  begin
    AreaInfo(area, startx, starty, rowsize, colsize, colnumber, rownumber);
    SetLength(Result, RowNumber * ColNumber);
    for row := 0 to rownumber - 1 do
      for col := 0 to colnumber - 1 do
      begin
        x1 := startx + col * colsize;
        y1 := starty + row * rowsize;
        x2 := x1 + colsize;
        y2 := y1 + rowsize;
        if FindItem(Itemx, Itemy, ItemType, Item, x1, y1, x2, y2, Tol) then
        begin
          Result[L].x := ItemX;
          Result[L].y := ItemY;
          Inc(L);
        end;
      end;
  end;
  SetLength(Result, L);
end;

function CountItemsIn(area, ItemType: string; Item: Integer; Tol: TIntegerArray): Integer;
begin
  Result := Length(ItemCoordinates(Area, ItemType, Item, Tol));
end;

function CountItemsArea(area: string): Integer;
begin
  Result := CountItemsIn(area, 'colour', srl_outline_black,  [0, 1]);
end;

function ItemAmount(area, ItemType: string; Item: Integer; Tol: TIntegerArray): Integer;
var
  startX, startY, rowSize, colSize, colNumber, rowNumber: integer;
  Coords: TPointArray;
  i, h: Integer;
begin
  Result := 0;
  AreaInfo(area, startX, startY, rowSize, colSize, colNumber, rowNumber);
  Coords := ItemCoordinates(Area, ItemType, Item, Tol);
  h := High(Coords);
  for i := 0 to h do
    Result := Result + GetAmountBox(IntToBox(Coords[i].x - floor(rowSize / 2),
                                             Coords[i].y - floor(colSize / 2),
                                             Coords[i].x + floor(rowSize / 2),
                                             Coords[i].y + floor(colSize / 4)));
end;

function FindCoins(var X, Y: Integer; Area: string): Boolean;
var
  B: TBox;
  CTS, I, J, H, L: Integer;
  Pts, tPts: TPointArray;
  ATPA: T2DPointArray;
  V: array [0..1] of TVariantArray;
begin
  case Lowercase(Area) of
    'inv', 'inventory': B := IntToBox(MIX1, MIY1, MIX2, MIY2);
    'bank': B := IntToBox(MBx1, MBy1, MBx2, MBy2);
    'trade': B := IntToBox(323, 73, 509, 302);
    'your trade': B := IntToBox(9, 73, 196, 302);
  end;
  V[0] := [1606307, 4, 0.09, 1.32]; //Darker colour (top of coins)
  V[1] := [2209251, 8, 0.04, 1.08]; //Lighter colour (rest of the coins)
  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);
  SetLength(tPts, 0);
  try
    for I := 0 to 1 do
    begin
      SetColorSpeed2Modifiers(V[I][2], V[I][3]);
      FindColorsTolerance(Pts, V[I][0], B.X1, B.Y1, B.X2, B.Y2, V[I][1]);
      if (Length(Pts) < 10) then Exit;
      ATPA := SplitTPAEx(Pts, 10, 10);
      h := High(ATPA);
      L := High(tPts) + 1;
      SetLength(tPts, L + h + 1);
      for J := 0 to H do
        tPts[L + j] := MiddleTPA(ATPA[J]);
    end;
    ATPA := SplitTPAEx(tPts, 20, 20);
    H := High(ATPA);
    for I := 0 to H do
      if (High(ATPA[I]) = 1) then
        Break;
    if (I > H) then Exit;
    Result := True;
    MiddleTPAEx(ATPA[I], X, Y);
  finally
    ColorToleranceSpeed(CTS);
    SetColorSpeed2Modifiers(0.2, 0.2);
  end;
end;

function CoinAmount(Area: string): Integer;
var
  X, Y: Integer;
begin
  if (FindCoins(X, Y, Area)) then
    Result := GetAmount(X, Y);
end;

procedure ShopSwitchTab(Name: string);
begin
  if (not(InStrArr(Name, ['main', 'player'], False))) then
  begin
    srl_Warn('ShopSwitchTab', 'Name: ' + Name + ' is not a valid tab.', warn_AllVersions);
    Exit;
  end;
  if (ShopScreen) then
    FindTextTpa(1930687, 0, 50, 65, 225, 83, Capitalize(Name), SmallChars, ClickLeft);
end;
