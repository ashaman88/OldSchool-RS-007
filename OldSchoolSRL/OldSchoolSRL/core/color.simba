//
{}

function FindDeformed(var Xoff, Yoff: Integer; BMP, a, b, c, d: Integer):
  Boolean;
var
  acc, ref: Extended;
  XT, YT, times, tol: Integer;
begin
  result := false;
  ref := 0.9;
  tol := 0;
  for times := 1 to 50 do
  begin
    FindDeformedBitmapToleranceIn(BMP, XT, YT, a, b, c, d, tol, 2, True, acc);
    if (acc >= ref) then
    begin
      Xoff := XT;
      YOff := YT;
      Result := True;
      Exit;
    end;
    if (Times mod 5 = 0) then
    begin
      ref := ref - 0.1;
      tol := tol + 10;
    end;
    Wait(1);
  end;
end;

function FindColorsPie(var Points: TPointArray; Color, Tol: Integer; StartD,
  EndD, MinR, MaxR: Extended; x1, y1, x2, y2, Mx, My: Integer): Boolean;
begin
  Result := FindColorsTolerance(Points, Color, x1, y1, x2, y2, Tol);
  if (Result) then
    FilterPointsPie(Points, StartD, EndD, MinR, MaxR, Mx, My);
end;

function DTMRotated(DTM: Integer; var x, y: Integer; x1, y1, x2, y2: Integer): Boolean;
var
  t, s, AngleFound: Extended;
begin
  result := false;
  if (FindDTM(DTM, x, y, x1, y1, x2, y2)) then
  begin
    Result := True;
    Exit;
  end;
  repeat
    s := 0.3;
    repeat
      if (FindDTMRotated(DTM, x, y, x1, y1, x2, y2, 0 - t, 0 + t, s, AngleFound)) then
      begin
        Result := True;
        Exit;
      end;
      s := s - 0.1;
    until (s <= 0.1);
    t := t + (Pi / 20);
  until (t >= Pi / 3);
end;

function GetColorsBox(x1, y1, x2, y2: Integer; ClearSameColors: Boolean): TIntegerArray;
begin
  Result := GetColors(TPAFromBox(IntToBox(x1, y1, x2, y2)));
  if (ClearSameColors) then
    ClearSameIntegers(Result);
end;

function PercentColorMMEx(Color, Tol, StartRadial, EndRadial, StartRadius, EndRadius: Integer): integer;
var
  TPA: TPointArray;
begin
  FindColorsTolerance(TPA, Color, MMX1, MMY1, MMX2, MMY2, Tol);
  FilterPointsPie(TPA, StartRadial, EndRadial, StartRadius, EndRadius, MMCX, MMCY);
  Result := ceil((Length(TPA) * 100) / ((Pi * (EndRadius * EndRadius)) * ((EndRadial - StartRadial) / 360.0)-((Pi * (StartRadius * StartRadius)) * ((EndRadial - StartRadial) / 360.0))));
end;

function PercentColorMM(Color, Tol: Integer): Integer;
begin
  Result := PercentColorMMEx(Color, Tol, 0, 360, 0, 76);
end;

function LoggedIn: Boolean; forward;

function FindMMColorsSpiralTolerance(var Points: TPointArray; Color, Tol: Integer): Boolean;
begin
  FindColorsSpiralTolerance(MMCX, MMCY, Points, Color, MMX1, MMY1, MMX2, MMY2, Tol);
  FilterPointsDist(Points,0,76,MMCX,MMCY);
  Result := (Length(Points) > 0);
end;

function ReturnTPAExceptColors(cols, tols: TIntegerArray; area: TBox): TPointArray;
var
  i: integer;
  tpa: TPointArray;
  atpa: T2DpointArray;
begin
  setLength(atpa, length(cols));
  for i := 0 to high(cols) do
    findColorsTolerance(atpa[i], cols[i], area.x1, area.y1, area.x2, area.y2, tols[i]);

  tpa := mergeATPA(atpa);
  clearDoubleTPA(tpa);
  result := returnPointsNotInTPA(tpa, getTPABounds(tpa));

  //debugTPA(result, '');
end;

function GetColorArrayInfo(C: array of Integer; var BestColors, Tolerances: TIntegerArray; var Speed2Mods: TExtendedArray; var rRGB: T2DIntegerArray; var rHSL, rXYZ: T2DExtendedArray): T3DExtendedArray;
var
  i, ii, h: Integer;
  tE: array of TExtendedArray;
begin
  h := Length(c);

  SetLength(rRGB, h);
  SetLength(rHSL, h);
  SetLength(rXYZ, h);
  SetLength(Tolerances, 3);
  SetLength(Speed2Mods, 2);
  SetLength(BestColors, 3);
  SetLength(Result, 3);
  Dec(h);
  for i := 0 to h do
  begin
    SetLength(rRGB[i], 3);
    SetLength(rHSL[i], 3);
    SetLength(rXYZ[i], 3);
  end;
  SetLength(tE, 3);
  for i := 0 to 2 do
  begin
    SetLength(Result[i], 3);
    SetLength(tE[i], 3);
    for ii := 0 to 2 do
      SetLength(Result[i][ii], 3);
  end;

  for i := 0 to 2 do
    for ii := 0 to 2 do
    begin
      Result[i][ii][0] := 300;
      Result[i][ii][1] := 0;
    end;

  Dec(h);
  for i := 0 to h do
  begin
    ColorToRGB(C[i], rRGB[i][0], rRGB[i][1], rRGB[i][2]);
    ColorToHSL(C[i], rHSL[i][0], rHSL[i][1], rHSL[i][2]);
    ColorToXYZ(C[i], rXYZ[i][0], rXYZ[i][1], rXYZ[i][2]);
    for ii := 0 to 2 do
    begin
      // Calculates the Min and Max of the RGB, HSL, and XYZ
      Result[0][ii][0] := Min(rRGB[i][ii], Round(Result[0][ii][0]));
      Result[0][ii][1] := Max(rRGB[i][ii], Round(Result[0][ii][1]));
      Result[1][ii][0] := MinE(rHSL[i][ii], Result[1][ii][0]);
      Result[1][ii][1] := MaxE(rHSL[i][ii], Result[1][ii][1]);
      Result[2][ii][0] := MinE(rXYZ[i][ii], Result[2][ii][0]);
      Result[2][ii][1] := MaxE(rXYZ[i][ii], Result[2][ii][1]);

      // Totals the Values of color values for later avg.
      Result[0][ii][2] := (Result[0][ii][2]) + (rRGB[i][ii]);
      Result[1][ii][2] := (Result[1][ii][2]) + (rHSL[i][ii]);
      Result[2][ii][2] := (Result[2][ii][2]) + (rXYZ[i][ii]);
    end;
  end;

  // Calculate the Geometric Average of the Ranges to create best colour.
  Inc(h);
  for i := 0 to 2 do
    for ii := 0 to 2 do
      Result[i][ii][2] := Result[i][ii][2] / h;

  for i := 0 to 2 do
    Result[0][i][2] := Round(Result[0][i][2]);

  // Get Tolerances for each ColorSpeedTolerance, 3 is unknown so is skipped.
  for i := 0 to 2 do
    Tolerances[0] := Max(Tolerances[0], iAbs(Round(Result[0][i][1] - Result[0][i][0])));

  Tolerances[1] := Ceil(sqrt(sqr(Result[0][0][0] - Result[0][0][1]) + sqr(Result[0][1][0] - Result[0][1][1])
                    + sqr(Result[0][2][0] - Result[0][2][1])));

  Tolerances[2] := Ceil(abs(Result[1][2][0] - Result[1][2][1]));
  for i := 0 to 1 do
  try
    Speed2Mods[i] := (abs(Result[1][i][0] - Result[0][i][1]) / Tolerances[2]);
  except Speed2Mods[i] := 0.0; end;


  // Create best colour based on ranges.
  BestColors[0] := RGBToColor(Round(Result[0][0][2]), Round(Result[0][1][2]), Round(Result[0][2][2]));
  BestColors[1] := HSLToColor(Result[1][0][2], Result[1][1][2], Result[1][2][2]);
  BestColors[2] := XYZToColor(Result[2][0][2], Result[2][1][2], Result[2][2][2]);
end;

function GetBestColor(Colors: TIntegerArray; CTS: Integer; var Tol: Integer; var Speed2Modifiers: TExtendedArray): Integer;
var
  RGB: T2DIntegerArray;
  HSL, XYZ: T2DExtendedArray;
  BestColours, Tols: TIntegerArray;
begin
  ClearSameIntegers(Colors);
  GetColorArrayInfo(Colors, BestColours, Tols, Speed2Modifiers, RGB, HSL, XYZ);
  if CTS <> 3 then Tol := Tols[CTS] else Writeln('ColorSpeed3Tolerance not supported.');
  if CTS <> 2 then Speed2Modifiers := [];
  if CTS = 0 then CTS := 1;
  Result := BestColours[CTS - 1];
end;

function CreateAutoColorInfo(Colors: TIntegerArray): TAutoColorInfo;
var
  RGB: T2DIntegerArray;
  HSL, XYZ: T2DExtendedArray;
  Mods: TExtendedArray;
  BestColours, Tols: TIntegerArray;
  EInfo: T3DExtendedArray;
begin
  EInfo := GetColorArrayInfo(Colors, BestColours, Tols, Mods, RGB, HSL, XYZ);

  with Result do
  begin
    Color := BestColours[1];
    HueMod := Mods[0];
    SatMod := Mods[1];
    LumTol := Tols[2];
    MinR := Round(EInfo[0][0][0]);  MaxR := Round(EInfo[0][0][1]);
    MinG := Round(EInfo[0][1][0]);  MaxG := Round(EInfo[0][1][1]);
    MinB := Round(EInfo[0][2][0]);  MaxB := Round(EInfo[0][2][1]);

    MinX := EInfo[2][0][0];  MaxX := EInfo[2][0][1];
    MinY := EInfo[2][1][0];  MaxY := EInfo[2][1][1];
    MinZ := EInfo[2][2][0];  MaxZ := EInfo[2][2][1];
  end;
end;

function SRL_GetBlackBackground: Integer;
var
  CTS, I, H, C, Count, MaxC: Integer;
  TPA: TPointArray;
  Cols: TIntegerArray;
begin
  Result := -1;
  if (not(LoggedIn)) then Exit;
  CTS := GetColorToleranceSpeed;

  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(100, 100);
  FindColorsTolerance(TPA, clBlack, MMX1, MMY1, MMX2, MMY2, 3);
  SetColorSpeed2Modifiers(0.2, 0.2);
  ColorToleranceSpeed(CTS);
  if (Length(TPA) < 1) then Exit;

  Cols := GetColors(TPA);
  ClearSameIntegers(Cols);

  H := High(Cols);
  for I := 0 to H do
  begin
    C := Cols[I];
    Count := CountColor(C, MMX1, MMY1, MMX2, MMY2);
    if (CountColor(C, MMX1, MMY1, MMX2, MMY2) > MaxC) then
    begin
      Result := C;
      MaxC := Count;
    end;
  end;

end;

function PercentBlackMM: Integer;
begin
  Result := PercentColorMM(SRL_GetBlackBackground, 0);
end;
