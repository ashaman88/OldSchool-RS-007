{ const VK_ENTER
  Description: Platform independent virtual enter key. }
const
  VK_ENTER = {$IFDEF LINUX}10{$ELSE}VK_RETURN{$ENDIF};

{ var OldLine,TheLine, TheName: String;
  Description: ChatLog vars. }
var
  OldLine, TheLine, TheName: string;

{ const clMessage, clChat, clTrade, clFriend
  Description: Text colour constants. }
const
  clMessage = clBlack;
  clAssist  = 14822282;
  clChat    = clBlue;
  clTrade   = clPurple;
  clFriend  = 128;

{ type TOptions
  Descripts: Choose option record.  }
Type
  TOptions = Record
    Str: string;
    Bounds, BigBox: TBox;
  end;

function CloseBank: Boolean; Forward;
function PlayerChatActive: Boolean; Forward;

function srl_Explode(str, del: string): TStringArray;
begin
  Result := Explode(del, str);
end;

function srl_Implode(Pieces: TStringArray; Glue: string): string;
begin
  Result := Implode(glue, pieces);
end;

function InStrArrEx(S: string; StrArr: TStringArray; var Where: Integer): Boolean;
var
   I, H: Integer;
begin
  H := High(StrArr);
  for I := 0 to H do
    if LowerCase(StrArr[i]) = LowerCase(S) then
    begin
      Where := i;
      Result := True;
      Break;
    end;
end;

function StrInArr(str: string; arrS: TStringArray): Boolean;
var
  I, L, H: Integer;
begin
  Result := True;
  L := Low(arrS);    H := High(arrS);
  for I := L to H do
    if Pos(Str, arrS[I]) > 0 then
      Exit;
  Result := False;
end;

function ArrInStr(arrS: TStringArray; str: string): Boolean;
var
  I, L, H: Integer;
begin
  Result := True;
  L := Low(arrS);    H := High(arrS);
  for I := L to H do
    if Pos(arrS[I], Str) > 0 then
      Exit;
  Result := False;
end;

procedure TypeByte(k: Byte);
begin
  {$IFDEF SMART}
  If (K = 13) then
    K:= 10;
  {$ENDIF}
  KeyDown(k);
  Wait(10 + Random(50));
  KeyUp(k);
end;

procedure TypeSendEx(Text: string; PressEnter: Boolean);
var
  I: Integer;
begin
  if (PressEnter and (not PlayerChatActive)) then
    TypeByte(VK_ENTER);

  for i := 1 to Length(Text) do
  begin
    {$IFDEF SIMBAMAJOR980}
    SendKeys(Text[i], 40 + Random(40));
    {$ELSE}
    SendKeys(Text[i], 30 + Random(30), 30 + Random(30));
    {$ENDIF}
    Wait(40 + Random(40));
  end;

  if (PressEnter) then
    TypeByte(VK_ENTER);
end;

procedure TypeSend(Text: string);
begin
  TypeSendEx(Text, True);
end;

function AddMistakes(Orig: string; Chance: Integer): string;
var
  Line1, Line2, Line: array [0..3] of string;
  i, j, TPos, Prob, Mist, L: Integer;
  Norm, Caps, Excp, TLine, NewKey: string;
begin
  Result := '';
  Norm := '`1234567890-=qwertyuiop[]\asdfghjkl;''zxcvbnm,./';
  Caps := '~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:"ZXCVBNM<>?';
  Excp := '`1234567890-=[]\;'',./~!@#$%^&*()_+{}|:"<>?';
  Line1[0] := '`1234567890-= ';     Line2[0] := '~!@#$%^&*()_+ ';
  Line1[1] := ' qwertyuiop[]\';     Line2[1] := ' QWERTYUIOP{}|';
  Line1[2] := ' asdfghjkl;''  ';    Line2[2] := ' ASDFGHJKL:"  ';
  Line1[3] := ' zxcvbnm,./   ';     Line2[3] := ' ZXCVBNM<>?   ';
  L := Length(Orig);
  for i := 1 to L do
  begin
    Prob := Chance;
    Prob := Prob + Mist;     //More mistakes = less chance of another mistake
    if (Pos(Orig[i], Excp) <> 0) then Prob := Prob - 2;  //If char is hard to type (numbers/symbols) - more chance
    if (i = 1) then Prob := Prob + 5; //The first letter - less chance
    if (Orig[i] <> ' ') and (Random(Max(Prob, 0)) = 0) then
    begin
      if (Pos(Orig[i], Norm) <> 0) then
        Line := Line1
      else
      if (Pos(Orig[i], Caps) <> 0) then
        Line := Line2;
      for j := 0 to 3 do
      begin
        TPos := Pos(Orig[i], Line[j]);
        if (TPos <> 0) then
          case Random(19) of
            0..5:                              //Same line
            begin
              TLine := Line[j];
              try
                NewKey := TLine[TPos - 1 + Random(3)];
              except end;
              if (NewKey = '') or (NewKey = ' ') then
                NewKey := TLine[TPos];
            end;
            6..8:                                        //Line above
            begin
              TLine := Line[Max(j - 1, 0)];
              try
                NewKey := Line[j - 1][TPos + Random(2)];
              except end;
              if (NewKey = '') or (NewKey = ' ') then
                NewKey := TLine[TPos];
            end;
            9..11:                                      //Line below
            begin
              TLine := Line[Min(j + 1, High(Line))];
              try
                NewKey := TLine[TPos - 1 + Random(2)];     //Wrong case
              except end;
              if (NewKey = '') or (NewKey = ' ') then
                NewKey := TLine[TPos];
            end;
            12..16:
            begin
              if (i - 1 >= 1) then
              begin
                if (Pos(Orig[i - 1], Caps) <> 0) then
                  NewKey := Line2[j][TPos]
                else
                if (Pos(Orig[i - 1], Norm) <> 0) then
                  NewKey := Line1[j][TPos]
              end else
              if (i + 1 <= Length(Orig)) then
              begin
                if (Pos(Orig[i + 1], Caps) <> 0) then
                  NewKey := Line2[j][TPos]
                else
                if (Pos(Orig[i + 1], Norm) <> 0) then
                  NewKey := Line1[j][TPos];
              end;
            end;
            17, 18: if (i <> 1) then NewKey := '';         //Missing letters
          end;
      end;
    end else
      NewKey := Orig[i];
    if (NewKey <> Orig[i]) then Inc(Mist);
    Result := Result + NewKey;
  end;
end;

function GetUpText: string;
begin
  Result := rs_GetUpText;
end;

function IsUpTextEx(Text: String): Boolean;
begin
  Text := Replace(Text, '?', '.');
  Result := ExecRegExpr('.*'+Text+'.*', GetUpText);
end;

function IsUpTextRe(RegEx: String): Boolean;
begin
  Result := ExecRegExpr(RegEx, GetUpText);
end;

function IsUpText(UpText: string): Boolean;
begin
  Result := (Pos(UpText, GetUpText) > 0);
end;

function IsUpTextMultiCustom(Text: TStringArray): Boolean;
var
  TheText: string;
  i, n: Integer;
begin
  TheText := GetUpText;
  n := High(Text);
  for i := 0 to n do
    if (Pos(Text[i], TheText) > 0) then
    begin
      Result := True;
      Exit;
    end;
end;

function GetLevelAtPos(x, y: Integer): integer;
begin
  MMouse(x, y, 0, 0);
  Wait(RandomRange(80, 150));
  Result := StrToIntDef(Between('l: ', ')', GetUpText), -1);
end;

function FindTextEx(var cx, cy: Integer; txt, fonts: TStringArray; xs, ys, xe, ye: Integer): Boolean;
var
  s, j, i: Integer;
begin
  for j := 0 to High(txt) do
    for i := 0 to High(fonts) do
    begin
      s := CreateBitmapMaskFromText(ToStr(txt[j]), ToStr(fonts[i]));

      if (xs < 0) then xs := 0;
      if (ys < 0) then ys := 0;

      Result := FindBitmapMaskTolerance(S, cx, cy, xs, ys, xe, ye, 30, 30);
      FreeBitmap(S);

      if (result) then
        exit;
    end;
end;

function FindText(var cx, cy: integer; txt, font: string; xs, ys, xe, ye: integer): boolean;
begin
  result := findTextEx(cx, cy, [txt], [font], xs, ys, xe, ye);
end;

function ClickText(text, chars: string; x1, y1, x2, y2: integer; button: variant): boolean;
var
  x, y: integer;
begin
  if (findText(x, y, text, chars, x1, y1, x2, y2)) then
  begin
    mouse(x, y, 5, 5, button);
    result := true;
  end;
end;

function LoadTextTPA(Text, Chars: string; var height: integer): TPointArray;
var
  w: integer;
begin
  result := TPAFromText(text,chars,w,height);
  dec(height);
end;

function FindTextTPAEx(Color,Tol,xs,ys,xe,ye : integer;var x,y : integer; Txt, Chars : string; Action  :fnct_ActionOptions ) : Boolean;
var
  TextTPA,SearchTPA, Matches: TPointArray;
  Box : TBox;
  xx,yy : integer;
begin
  FindColorsTolerance(SearchTPA,Color,xs,ys,xe,ye,tol);
  if Length(SearchTPA) < 1 then
    Exit;
  TextTPA:= LoadTextTPA(Txt,Chars,yy);
  Result := FindTextTPAinTPA(yy ,TextTPA,SearchTPA,Matches);
  x := 0; y:=0;
  if Result = False then
    Exit;
  Box := GetTPABounds(TextTPA);
  SortTPAFrom(Matches, Point(Box.x1, Box.y1));
  x := matches[0].x;
  y := matches[0].y;
  if Action = Nothing then
    Exit;
  GetMousePos(xx,yy);
  if not IntInBox(xx,yy,IntToBox(matches[0].x,matches[0].y,matches[0].x + Box.x2,Matches[0].y + (Box.y2 shr 1))) then
    MMouse(matches[0].x + Random(box.x2),Matches[0].y + Random(Box.y2 shr 1),0,0);
  if Action = Move then
    Exit;
  GetMousePos(xx,yy);
  MouseAction(xx, yy, 0, 0, Action);
end;

function FindTextTPA(Color, Tol, xs, ys, xe, ye: integer; Txt, Chars: string; Action: fnct_ActionOptions): Boolean;
var
  x,y : integer;
begin
  Result := FindTextTPAEx(Color,Tol,xs,ys,xe,ye,x,y,Txt,chars,action);
end;


function FindTextTPAMulti(Color, tol, xs, ys, xe, ye: integer;
    Texts: TStringArray; Chars: string; Action: fnct_ActionOptions): Boolean;

var
  I: Integer;
begin
  for i := 0 to High(Texts) do
    if FindTextTPA(Color, Tol, xs, ys, xe, ye, Texts[i], Chars, Action) then
    begin
      Result := True;
      Exit;
    end;
end;

function FindNPCChatTextMulti(txt: TStringArray; action: fnct_ActionOptions): boolean;
var
  x, y: integer;
  chars: TStringArray;
begin
  chars := [UpChars, CharsNPC];

  if (findTextEx(x, y, txt, chars, MCX1, MCY1, MCX2, MCY2)) then
  begin
    case action of
      Move: MMouse(x, y, 6, 3);
      ClickLeft: Mouse(x, y, 6, 3, mouse_Left);
      ClickRight: Mouse(x, y, 6, 3, mouse_Right);
    end;

    result := true;
    exit;
  end;
end;

function FindNPCChatText(txt: string; action: fnct_ActionOptions): boolean;
begin
  result := findNPCChatTextMulti([txt], action);
end;

procedure SortATPAFromFirstPointY(var a: T2DPointArray; const From: TPoint);
var
   i, l: Integer;
   DistArr: TIntegerArray;
begin
  l := high(a);
  if (l < 0) then
    Exit;

  setLength(DistArr, l + 1);
  for i := 0 to l do
  begin
    if (length(a[i]) <= 0) then // prevent out of range errors
      continue;

    DistArr[i] := Round(Sqr(From.y - a[i][0].y));
  end;

  QuickATPASort(DistArr, a, 0, l, True);
end;

procedure SortATPAFromFirstPointX(var a: T2DPointArray; const From: TPoint);
var
   i, l: Integer;
   DistArr: TIntegerArray;
begin
  l := High(a);
  if (l < 0) then
    Exit;

  SetLength(DistArr, l + 1);
  for i := 0 to l do
  begin
    if (length(a[i]) <= 0) then
      continue;

    DistArr[i] := Round(Sqr(From.x - a[i][0].x));
  end;

  QuickATPASort(DistArr, a, 0, l, True);
end;

Function GetChooseOptions(): Array of TOptions;
var
  I, L, target, bmp, w, h, cts, n, m : Integer;
  B, BB, BigBox : TBox;
  TPA, TPA1 : TPointArray;
  ATPA, tempatpa : T2DPointArray;
begin
  target := GetImageTarget;
  GetClientDimensions(B.X2, B.Y2);
  B := IntToBox(0, 0, B.X2-1, B.Y2-1);
  cts := GetColorToleranceSpeed;
  ColorToleranceSpeed(1);

  FindColorsTolerance(TPA, 4674653, B.X1, B.Y1, B.X2, B.Y2, 0);
  if (Length(TPA) < 100) then
  begin
    ColorToleranceSpeed(cts);
    Exit;
  end;
  ATPA := SplitTPA(TPA, 4);
  for i := 0 to High(ATPA) do
  begin
    B := GetTPABounds(ATPA[i]);
    if ((B.x2-B.x1) > 90) and ((B.y2-B.y1) > 18) then
      Break
    else
      B := IntToBox(0, 0, 0, 0);
  end;
  If (B.x2 = 0) then
  begin
    ColorToleranceSpeed(cts);
    Exit;
  end;
  BigBox := B;
  SetColorToleranceSpeed(3);

  B := GetATPABounds(ATPA);

  FindColorsTolerance(TPA1, 0, B.X1, B.Y1, B.X2, B.Y2, 0);
  CombineTPAWrap(TPA, TPA1, TPA);

  ReturnPointsNotInTPAWrap(TPA, B, TPA);

  SetColorToleranceSpeed(cts);

  B := GetTPABounds(TPA);

  n := B.Y2 - B.Y1;
  m := 15 - n mod 15;
  n := n + m;
  bmp := CreateBitmap(B.X2 - B.X1 + 3, n + 1);

  OffSetTPA(TPA, Point(-B.X1, -B.Y1));

  DrawTPABitmap(bmp, TPA, clRed);

  GetbitmapSize(bmp, w, h);

  SetTargetBitmap(bmp);
  SetLength(ATPA, h div 15);
  for i := 0 to High(ATPA) do
    FindColorsTolerance(ATPA[i], clRed, 0, i*15,  w-1, 15+i*15, 0);

  L := High(ATPA);
  SortATPAFromFirstPointY(ATPA, Point(w div 2, 0));

  SetArrayLength(Result, Length(ATPA));
  Result[0].BigBox := BigBox;
  for i := 0 to high(ATPA) do
  begin
    TPA := ATPA[i];
    tempatpa := SplitTPAEx(TPA, 1, 10);
    SortATPAFromFirstPointX(tempatpa, Point(0, 0));
    Result[i].Str := GetTextATPA(tempatpa, 5, 'P07UpChars');
    BB := GetTPABounds(ATPA[i]);
    Result[i].Bounds := IntToBox(BB.X1+B.X1, BB.Y1+B.Y1, BB.X2+B.X1, BB.Y2+B.Y1);
    setlength(tempatpa,0);
    setlength(TPA,0);
  end;
  ColorToleranceSpeed(cts);
  SetImageTarget(target);
  FreeBitmap(bmp);
end;

function ChooseOptionMultiEx(Texts: TStringArray; TextType: String; Action: fnct_ActionOptions): Boolean;
var
   B: TBox;
   i, H, x, R: Integer;
   T: TPoint;
   Options: array of TOptions;
begin
  Result := False;
  Options := GetChooseOptions();
  if (Length(Options) < 1) then
    Exit;
  H := High(Options);
  for i := 0 To H do
  begin
    if ArrInStr(Texts, Options[i].Str) then
    begin
      Result := True;
      B := Options[i].Bounds;
      GetMousePos(T.x, T.y);

      R:= Min(((B.X2 - B.X1) shr 1), 5); //Prevents x2 passed to MouseBoxEx being smaller than x1
      case Action of
        ClickLeft:
          if PointInBox(T, B) then
            ClickMouse2(true)
          else
            MouseBoxEx(B.x1 + R, B.Y1, B.x2 - R, B.Y1 + 5, R, mouse_Left);

        Move:
          if not PointInBox(T, B) then
            MouseBoxEx(B.x1 + R, B.Y1, B.x2 - R, B.Y1 + 5, R, mouse_move);

        Nothing:
          begin
          end;

        else
          srl_warn('ChooseOptionMultiEx', 'ClickRight not a valid click for RS menus!', warn_AllVersions);
      end;
      Exit;
    end;
  end;
  B := Options[0].BigBox;//to mmouse away
  if Action <> Nothing then
  begin
    x := Max(B.X1 - 52, 0);
    if x = 0 then
      x := B.X2+10;
    MMouse(x, Max(B.Y1 - 50, 0), 40, B.Y2-B.Y1);
    Wait(200 + Random(100));
  end;
end;

function ChooseOptionMulti(Txt: TStringArray): Boolean;
begin
  Result := ChooseOptionMultiEx(Txt, 'All', ClickLeft);
end;

function ChooseOptionEx(Txt, TextType: string): Boolean;
begin
  Result := ChooseOptionMultiEx([Txt], TextType, ClickLeft);
end;

function ChooseOption(Txt: String): Boolean;
begin
  Result := ChooseOptionMultiEx([Txt], 'All', ClickLeft);
end;

function OptionsExist(txt: TStringArray; MoveMouse: boolean): boolean;
begin
  if MoveMouse then
    Result := ChooseOptionMultiEx(Txt, 'All', Move)
  else
    Result := ChooseOptionMultiEx(Txt, 'All', Nothing);
end;

function CloseWindow: Boolean;
var
  Col: TIntegerArray;
  b: array[0..1] of TPointArray;
  a: T2DPointArray;
  Pa: TBox;
  i, ii, l, x, y: Integer;
begin
  if (CloseBank) then
  begin
    Result := true;
    exit;
  end;

  // handles the advanced skill guide window
  if (findColorTolerance(x, y, 2994428, 728, 8, 753, 30, 20)) then
  begin
    mouse(x, y, 3, 3, mouse_Left);
    result := true;
    exit;
  end;

  Col := [1118997,  1449250,  {Main typ 1}
          3912691,  1973857,  {Quest}
          4282212,  2503226,  {Main typ 2}
          39423,    13567,    {Red X}
          1514271,  1580837,  {Deposit Box}
          1383457,  2107437];

  for i := 0 to 5 do
  begin
    FindColorsTolerance(b[0], Col[i * 2], MSCX, MSY1, MSX2, MSCY, 5);
    FindColorsTolerance(b[1], Col[i * 2 + 1], MSCX, MSY1, MSX2, MSCY, 5);
    l := (High(b[0]) + High(b[1]));

    if InRange(l, 6, 53) or InRange(l, 94, 250) then
    begin
      a := SplitTPA(CombineTPA(b[0], b[1]), 5);
      SortATPAFromFirstPoint(a, Point(507, 14));

      if (length(a) < 1) then
        Continue;

      for ii := 0 to high(a) do
      begin
        Pa := GetTPABounds(a[ii]);
        if ((Pa.x2 - Pa.x1) > 50) or ((Pa.y2 - Pa.y1) > 50) then
          Continue;

        MouseBox(Pa.x1, Pa.y1, Pa.x2, Pa.y2, mouse_move);
        if (WaitUptextMulti(['lose', 'ack', 'Cl', 'se'], 300)) then
        begin
          GetMousePos(Pa.x1, Pa.y1);
          Mouse(Pa.x1, Pa.y1, 0, 0, mouse_left);
          Result := True;
          Exit;
        end;
      end;
    end;
  end;
end;
